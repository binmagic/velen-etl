<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!--<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.0.RELEASE</version>
		<relativePath /> &lt;!&ndash; lookup parent from repository &ndash;&gt;
	</parent>-->

	<groupId>com.github.binmagic</groupId>
	<artifactId>velen-etl-parent</artifactId>
	<version>0.0.1</version>
	<name>velen-etl</name>
	<description>ETL project for Spring Boot</description>
	<packaging>pom</packaging>
	<url>https://github.com/binmagic/velen-etl</url>

	<scm>
		<connection>scm:git:git@github.com:binmagic/velen-etl.git</connection>
		<developerConnection>scm:git:git@github.com:binmagic/velen-etl.git</developerConnection>
		<url>https://github.com/binmagic/velen-etl</url>
	  <tag>velen-etl-parent-0.0.1</tag>
  </scm>

	<distributionManagement>
		<snapshotRepository>
			<id>nexus-snapshot</id>
			<name>nexus-snapshot</name>
			<url>http://192.168.1.210:8082/repository/maven-snapshots/</url>
		</snapshotRepository>
		<repository>
			<id>nexus-release</id>
			<name>nexus-release</name>
			<url>http://192.168.1.210:8082/repository/maven-releases/</url>
		</repository>
	</distributionManagement>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<modules>
		<module>velen-etl-generator</module>
		<module>velen-etl-stream</module>
		<module>velen-etl-common</module>
		<module>velen-etl-task</module>
	</modules>

	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<spring.cloud.alibaba.dependencies.version>2.2.1.RELEASE</spring.cloud.alibaba.dependencies.version>
		<spring.cloud.dependencies.version>Hoxton.SR3</spring.cloud.dependencies.version>
		<spring.boot.version>2.2.5.RELEASE</spring.boot.version>
		<lombok.version>1.18.12</lombok.version>


		<jacoco.outputDir>${project.basedir}/target</jacoco.outputDir>
		<jacoco.out.it.file>jacoco-it.exec</jacoco.out.it.file>
		<sonar.host.url>http://192.168.1.210:9002</sonar.host.url>
		<sonar.java.binaries>target/classes</sonar.java.binaries>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.jacoco.reportPaths>${jacoco.outputDir}/${jacoco.out.it.file}</sonar.jacoco.reportPaths>

		<!-- 放在哪不确定 -->
		<etl.generator.version>0.0.1-SNAPSHOT</etl.generator.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring.cloud.dependencies.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring.boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
				<scope>provided</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring.boot.version}</version>
				</plugin>
				<!--<plugin>
					<groupId>org.jetbrains.kotlin</groupId>
					<artifactId>kotlin-maven-plugin</artifactId>
					<version>${kotlin.version}</version>
				</plugin>-->

				<!-- compiler -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version>
				</plugin>
				<plugin>
					<groupId>com.spotify</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>1.2.2</version>
				</plugin>
				<plugin>
					<groupId>pl.project13.maven</groupId>
					<artifactId>git-commit-id-plugin</artifactId>
					<version>4.0.0</version>
				</plugin>

				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<configuration>
						<skip>${skipJacoco}</skip>
						<destFile>${sonar.jacoco.reportPaths}</destFile>
						<propertyName>jacoco.agent.ut.arg</propertyName>
						<append>true</append>
					</configuration>
					<executions>
						<execution>
							<id>pre-unit-test</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- maven编译取消test测试 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.22.2</version>
					<configuration>
						<argLine>${jacoco.agent.ut.arg} --add-opens java.base/jdk.internal.loader=ALL-UNNAMED
							-Dco.paralleluniverse.fibers.DefaultFiberPool.monitor=NONE -Dstorm.util.debug.check=true
							--add-opens java.base/jdk.internal.misc=ALL-UNNAMED --add-opens
							java.base/java.lang=ALL-UNNAMED -Dco.paralleluniverse.fibers.verifyInstrumentation=true
						</argLine>
						<skip>${skipTests}</skip>
					</configuration>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<fork>true</fork>  <!-- 如果没有该生效标志，热部署的devtools不生效 -->
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>compile</id>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>test-compile</id>
						<phase>test-compile</phase>
						<goals>
							<goal>test-compile</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<jvmTarget>1.8</jvmTarget>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<executions>
					<!-- 替换会被 maven 特别处理的 default-compile -->
					<execution>
						<id>default-compile</id>
						<phase>none</phase>
					</execution>
					<!-- 替换会被 maven 特别处理的 default-testCompile -->
					<execution>
						<id>default-testCompile</id>
						<phase>none</phase>
					</execution>
					<execution>
						<id>java-compile</id>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>java-test-compile</id>
						<phase>test-compile</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>

			<!-- maven编译取消test测试 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!--不同环境Profile的唯一id-->
			<id>dev</id>
			<properties>
				<!--profiles.active是自定义的字段（名字随便起），自定义字段可以有多个-->
				<profiles.active>dev</profiles.active>
				<skipSecurity>true</skipSecurity>
				<skipJavadoc>false</skipJavadoc>
				<skipSource>false</skipSource>
				<skipTests>true</skipTests>
				<skipJacoco>true</skipJacoco>
				<skipSonar>true</skipSonar>
				<coverOriginal>false</coverOriginal>
				<enableInstrument>true</enableInstrument>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>release</id>
			<properties>
				<profiles.active>release</profiles.active>
				<skipSecurity>false</skipSecurity>
				<skipJavadoc>true</skipJavadoc>
				<skipSource>true</skipSource>
				<skipTests>true</skipTests>
				<skipJacoco>true</skipJacoco>
				<skipSonar>true</skipSonar>
				<coverOriginal>false</coverOriginal>
				<enableInstrument>true</enableInstrument>
			</properties>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<profiles.active>test</profiles.active>
				<skipSecurity>true</skipSecurity>
				<skipJavadoc>true</skipJavadoc>
				<skipSource>true</skipSource>
				<skipTests>false</skipTests>
				<skipJacoco>false</skipJacoco>
				<skipSonar>false</skipSonar>
				<coverOriginal>false</coverOriginal>
				<enableInstrument>true</enableInstrument>
			</properties>
		</profile>
		<profile>
			<id>release-stress</id>
			<properties>
				<profiles.active>release</profiles.active>
				<skipSecurity>false</skipSecurity>
				<skipJavadoc>true</skipJavadoc>
				<skipSource>true</skipSource>
				<skipTests>true</skipTests>
				<skipJacoco>true</skipJacoco>
				<skipSonar>true</skipSonar>
				<coverOriginal>false</coverOriginal>
				<enableInstrument>false</enableInstrument>
			</properties>
		</profile>
	</profiles>

</project>
